#!/usr/bin/env node

/**
 * Test On-Chain Price Fetching
 * Verifies that the new on-chain price service works correctly
 */

require('dotenv').config();
const { ethers } = require('ethers');
const MarketMakingConfig = require('../src/config/marketMakingConfig');
const OnChainPriceService = require('../src/services/onChainPriceService');

async function testOnChainPricing() {
  console.log('üß™ Testing On-Chain Price Fetching Service');
  console.log('‚ïê'.repeat(50));

  try {
    // Initialize configuration and provider
    const config = new MarketMakingConfig();
    const provider = new ethers.providers.JsonRpcProvider(config.network.rpcUrl);
    
    console.log(`üåê Connected to: ${config.network.name}`);
    console.log(`üîó RPC URL: ${config.network.rpcUrl}`);
    console.log('');

    // Initialize on-chain price service
    const priceService = new OnChainPriceService(config, provider);
    await priceService.initialize();
    
    console.log('‚úÖ On-chain price service initialized');
    console.log('');

    // Test 1: Get HYPE/UBTC quote
    console.log('üìä Test 1: HYPE ‚Üí UBTC Quote');
    console.log('‚îÄ'.repeat(30));
    
    const hypeAmount = ethers.utils.parseUnits('1', 18); // 1 HYPE
    const hypeToUbtcQuote = await priceService.getBestQuote(
      config.tokens.HYPE.address,
      config.tokens.UBTC.address,
      hypeAmount,
      3000
    );

    if (hypeToUbtcQuote) {
      const ubtcReceived = ethers.utils.formatUnits(hypeToUbtcQuote.amountOut, 8);
      console.log(`‚úÖ 1 HYPE ‚Üí ${ubtcReceived} UBTC`);
      console.log(`üìà Source: ${hypeToUbtcQuote.source} (${hypeToUbtcQuote.version})`);
      console.log(`üîÑ Router: ${hypeToUbtcQuote.router}`);
      if (hypeToUbtcQuote.gasEstimate) {
        console.log(`‚õΩ Gas Estimate: ${hypeToUbtcQuote.gasEstimate.toString()}`);
      }
    } else {
      console.log('‚ùå Failed to get HYPE ‚Üí UBTC quote');
    }
    console.log('');

    // Test 2: Get UBTC/HYPE quote (reverse)
    console.log('üìä Test 2: UBTC ‚Üí HYPE Quote');
    console.log('‚îÄ'.repeat(30));
    
    const ubtcAmount = ethers.utils.parseUnits('0.001', 8); // 0.001 UBTC
    const ubtcToHypeQuote = await priceService.getBestQuote(
      config.tokens.UBTC.address,
      config.tokens.HYPE.address,
      ubtcAmount,
      3000
    );

    if (ubtcToHypeQuote) {
      const hypeReceived = ethers.utils.formatUnits(ubtcToHypeQuote.amountOut, 18);
      console.log(`‚úÖ 0.001 UBTC ‚Üí ${hypeReceived} HYPE`);
      console.log(`üìà Source: ${ubtcToHypeQuote.source} (${ubtcToHypeQuote.version})`);
      console.log(`üîÑ Router: ${ubtcToHypeQuote.router}`);
      if (ubtcToHypeQuote.gasEstimate) {
        console.log(`‚õΩ Gas Estimate: ${ubtcToHypeQuote.gasEstimate.toString()}`);
      }
    } else {
      console.log('‚ùå Failed to get UBTC ‚Üí HYPE quote');
    }
    console.log('');

    // Test 3: Price calculation
    console.log('üìä Test 3: Price Calculation');
    console.log('‚îÄ'.repeat(25));
    
    const priceData = await priceService.getPrice(
      config.tokens.HYPE.address,
      config.tokens.UBTC.address,
      3000
    );

    if (priceData) {
      console.log(`‚úÖ HYPE/UBTC Price: ${priceData.price.toFixed(8)}`);
      console.log(`üìä Input Amount: ${priceData.inputAmount} HYPE`);
      console.log(`üìä Output Amount: ${priceData.outputAmount} UBTC`);
      console.log(`üìà Quote Source: ${priceData.quote.source}`);
    } else {
      console.log('‚ùå Failed to calculate price');
    }
    console.log('');

    // Test 4: Exact output quote
    console.log('üìä Test 4: Exact Output Quote');
    console.log('‚îÄ'.repeat(28));
    
    const desiredUbtc = ethers.utils.parseUnits('0.001', 8); // Want 0.001 UBTC
    const exactOutputQuote = await priceService.getExactOutputQuote(
      config.tokens.HYPE.address,
      config.tokens.UBTC.address,
      desiredUbtc,
      3000
    );

    if (exactOutputQuote) {
      const hypeNeeded = ethers.utils.formatUnits(exactOutputQuote.amountIn, 18);
      console.log(`‚úÖ Need ${hypeNeeded} HYPE ‚Üí 0.001 UBTC`);
      console.log(`üìà Source: ${exactOutputQuote.source}`);
    } else {
      console.log('‚ùå Failed to get exact output quote');
    }
    console.log('');

    // Test 5: Cache performance
    console.log('üìä Test 5: Cache Performance');
    console.log('‚îÄ'.repeat(26));
    
    const startTime = Date.now();
    const cachedQuote = await priceService.getBestQuote(
      config.tokens.HYPE.address,
      config.tokens.UBTC.address,
      hypeAmount,
      3000
    );
    const cacheTime = Date.now() - startTime;
    
    if (cachedQuote) {
      console.log(`‚úÖ Cached quote retrieved in ${cacheTime}ms`);
      console.log(`üìä Same result: ${cachedQuote.amountOut.eq(hypeToUbtcQuote.amountOut)}`);
    }
    console.log('');

    // Summary
    console.log('üìã Test Summary');
    console.log('‚îÄ'.repeat(15));
    console.log(`‚úÖ HYPE ‚Üí UBTC: ${hypeToUbtcQuote ? 'PASS' : 'FAIL'}`);
    console.log(`‚úÖ UBTC ‚Üí HYPE: ${ubtcToHypeQuote ? 'PASS' : 'FAIL'}`);
    console.log(`‚úÖ Price Calc: ${priceData ? 'PASS' : 'FAIL'}`);
    console.log(`‚úÖ Exact Output: ${exactOutputQuote ? 'PASS' : 'FAIL'}`);
    console.log(`‚úÖ Cache: ${cachedQuote ? 'PASS' : 'FAIL'}`);
    console.log('');

    const allPassed = hypeToUbtcQuote && ubtcToHypeQuote && priceData && exactOutputQuote && cachedQuote;
    
    if (allPassed) {
      console.log('üéâ All tests PASSED! On-chain price service is working correctly.');
    } else {
      console.log('‚ö†Ô∏è Some tests FAILED. Check the implementation.');
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error);
    process.exit(1);
  }
}

// Run tests if called directly
if (require.main === module) {
  testOnChainPricing().catch(error => {
    console.error('‚ùå Test execution failed:', error);
    process.exit(1);
  });
}

module.exports = testOnChainPricing;
