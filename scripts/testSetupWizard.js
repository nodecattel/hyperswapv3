require('dotenv').config();
const { ethers } = require('ethers');
const MarketMakingConfig = require('../src/config/marketMakingConfig');
const FundingCalculator = require('../src/services/fundingCalculator');

/**
 * Test Setup Wizard Components (Non-Interactive)
 * Tests the setup wizard logic without user interaction
 */

async function testSetupWizardLogic() {
  console.log('üßô‚Äç‚ôÇÔ∏è Testing Setup Wizard Logic...');
  console.log('‚ïê'.repeat(40));
  
  try {
    // Simulate wizard configuration
    const wizardConfig = {
      PRIVATE_KEY: '0x' + '1'.repeat(64), // Test private key
      RPC_URL: 'https://rpc.hyperliquid.xyz/evm',
      CHAIN_ID: '999',
      NETWORK: 'mainnet',
      MULTI_PAIR_ENABLED: 'true',
      ENABLE_HYPE_UBTC: 'true',
      ENABLE_HYPE_USDT0: 'true',
      ENABLE_USDHL_USDT0: 'false',
      ENABLE_HYPE_UETH: 'false',
      TRADE_SIZE_HYPE: '1.0',
      TRADE_SIZE_UBTC: '0.001',
      TRADE_SIZE_USDT0: '15.0',
      TRADE_SIZE_USDHL: '10.0',
      TRADE_SIZE_UETH: '0.01',
      MAX_DAILY_LOSS_USD: '100',
      MAX_POSITION_SIZE_USD: '1000',
      TOTAL_PORTFOLIO_SIZE_USD: '5000'
    };
    
    console.log('‚úÖ Wizard configuration created');
    
    // Test wallet validation
    console.log('\nüîê Testing Wallet Validation...');
    const wallet = new ethers.Wallet(wizardConfig.PRIVATE_KEY);
    console.log(`‚úÖ Wallet address: ${wallet.address}`);
    
    // Test funding calculation with wizard config
    console.log('\nüí∞ Testing Funding Calculation...');
    
    // Create temporary config similar to setup wizard
    const tempConfig = new MarketMakingConfig();
    
    // Ensure required properties exist
    if (!tempConfig.trading) tempConfig.trading = {};
    if (!tempConfig.inventory) tempConfig.inventory = {};
    if (!tempConfig.risk) tempConfig.risk = {};
    if (!tempConfig.tradingPairs) tempConfig.tradingPairs = {};
    
    // Override with wizard settings
    tempConfig.trading.tradeSizes = {
      HYPE: parseFloat(wizardConfig.TRADE_SIZE_HYPE),
      UBTC: parseFloat(wizardConfig.TRADE_SIZE_UBTC),
      USDT0: parseFloat(wizardConfig.TRADE_SIZE_USDT0),
      USDHL: parseFloat(wizardConfig.TRADE_SIZE_USDHL),
      UETH: parseFloat(wizardConfig.TRADE_SIZE_UETH)
    };
    
    tempConfig.inventory.maxPositionSizeUsd = parseFloat(wizardConfig.MAX_POSITION_SIZE_USD);
    tempConfig.risk.maxDailyLossUsd = parseFloat(wizardConfig.MAX_DAILY_LOSS_USD);
    
    // Initialize trading pairs
    const pairNames = ['HYPE/UBTC', 'HYPE/USDT0', 'USDHL/USDT0', 'HYPE/UETH'];
    for (const pairName of pairNames) {
      if (!tempConfig.tradingPairs[pairName]) {
        tempConfig.tradingPairs[pairName] = { enabled: false };
      }
    }
    
    // Set enabled pairs
    tempConfig.tradingPairs['HYPE/UBTC'].enabled = wizardConfig.ENABLE_HYPE_UBTC === 'true';
    tempConfig.tradingPairs['HYPE/USDT0'].enabled = wizardConfig.ENABLE_HYPE_USDT0 === 'true';
    tempConfig.tradingPairs['USDHL/USDT0'].enabled = wizardConfig.ENABLE_USDHL_USDT0 === 'true';
    tempConfig.tradingPairs['HYPE/UETH'].enabled = wizardConfig.ENABLE_HYPE_UETH === 'true';
    
    const fundingCalculator = new FundingCalculator(tempConfig);
    const requirements = await fundingCalculator.calculateMinimumFunding();
    
    console.log('‚úÖ Funding calculation successful');
    console.log(`   Total USD Required: $${requirements.totalUsd.toFixed(2)}`);
    console.log(`   Gas Reserve: ${requirements.gasReserveHype.toFixed(6)} HYPE`);
    
    // Test .env generation
    console.log('\nüìÑ Testing .env Generation...');
    const envContent = generateEnvContent(wizardConfig);
    console.log('‚úÖ .env content generated successfully');
    console.log(`   Content length: ${envContent.length} characters`);
    console.log(`   Contains PRIVATE_KEY: ${envContent.includes('PRIVATE_KEY=')}`);
    console.log(`   Contains NETWORK: ${envContent.includes('NETWORK=mainnet')}`);
    
    // Test funding guide generation
    console.log('\nüìã Testing Funding Guide Generation...');
    const fundingGuide = generateFundingGuide(wizardConfig, requirements);
    console.log('‚úÖ Funding guide generated successfully');
    console.log(`   Guide length: ${fundingGuide.length} characters`);
    console.log(`   Contains wallet address: ${fundingGuide.includes(wallet.address)}`);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå Setup wizard logic test failed:', error.message);
    console.error('Stack trace:', error.stack);
    return false;
  }
}

function generateEnvContent(config) {
  const sections = [
    '# HyperSwap Market Making Bot Configuration',
    '# Generated by Setup Wizard',
    '',
    '# Wallet Configuration',
    `PRIVATE_KEY=${config.PRIVATE_KEY}`,
    '',
    '# Network Configuration',
    `RPC_URL=${config.RPC_URL}`,
    `CHAIN_ID=${config.CHAIN_ID}`,
    `NETWORK=${config.NETWORK}`,
    '',
    '# Multi-Pair Trading Configuration',
    `MULTI_PAIR_ENABLED=${config.MULTI_PAIR_ENABLED}`,
    `MAX_ACTIVE_PAIRS=2`,
    '',
    '# Trading Pair Enablement',
    `ENABLE_HYPE_UBTC=${config.ENABLE_HYPE_UBTC}`,
    `ENABLE_HYPE_USDT0=${config.ENABLE_HYPE_USDT0}`,
    `ENABLE_USDHL_USDT0=${config.ENABLE_USDHL_USDT0}`,
    `ENABLE_HYPE_UETH=${config.ENABLE_HYPE_UETH}`,
    '',
    '# Trade Sizes',
    `TRADE_SIZE_HYPE=${config.TRADE_SIZE_HYPE}`,
    `TRADE_SIZE_UBTC=${config.TRADE_SIZE_UBTC}`,
    `TRADE_SIZE_USDT0=${config.TRADE_SIZE_USDT0}`,
    `TRADE_SIZE_USDHL=${config.TRADE_SIZE_USDHL}`,
    `TRADE_SIZE_UETH=${config.TRADE_SIZE_UETH}`,
    '',
    '# Risk Management',
    `MAX_DAILY_LOSS_USD=${config.MAX_DAILY_LOSS_USD}`,
    `MAX_POSITION_SIZE_USD=${config.MAX_POSITION_SIZE_USD}`,
    `TOTAL_PORTFOLIO_SIZE_USD=${config.TOTAL_PORTFOLIO_SIZE_USD}`,
    '',
    '# Bot Configuration',
    'DRY_RUN=true',
    'LOG_LEVEL=info',
    'TRADING_INTERVAL_MS=5000',
    '',
    '# Token Validation',
    'VALIDATE_TOKEN_LIST=true',
    'FAIL_ON_TOKEN_VALIDATION=false'
  ];
  
  return sections.join('\n') + '\n';
}

function generateFundingGuide(config, requirements) {
  const wallet = new ethers.Wallet(config.PRIVATE_KEY);
  
  const guide = [
    '# Funding Guide for Your Market Making Bot',
    '',
    '## Summary',
    `- **Total USD Required**: $${requirements.totalUsd.toFixed(2)}`,
    `- **Wallet Address**: ${wallet.address}`,
    `- **Network**: ${config.NETWORK}`,
    '',
    '## Token Requirements',
    ''
  ];
  
  for (const [symbol, tokenReq] of Object.entries(requirements.tokens)) {
    guide.push(`### ${symbol}`);
    guide.push(`- **Amount**: ${tokenReq.amount.toFixed(6)} ${symbol}`);
    guide.push(`- **USD Value**: $${tokenReq.usdValue.toFixed(2)}`);
    guide.push('');
  }
  
  guide.push('## Gas Reserve');
  guide.push(`- **HYPE for Gas**: ${requirements.gasReserveHype.toFixed(6)} HYPE`);
  guide.push(`- **USD Value**: $${requirements.gasReserveUsd.toFixed(2)}`);
  guide.push('');
  
  guide.push('## Next Steps');
  guide.push('1. Fund your wallet with the required tokens');
  guide.push('2. Run balance validation: `npm run check:funding`');
  guide.push('3. Test configuration: `npm test`');
  guide.push('4. Start with dry run: `npm start`');
  
  return guide.join('\n');
}

async function testPresetConfigurations() {
  console.log('\nüéõÔ∏è Testing Preset Configurations...');
  console.log('‚ïê'.repeat(40));
  
  const presets = {
    beginner: {
      TRADE_SIZE_HYPE: '0.5',
      TRADE_SIZE_UBTC: '0.0005',
      MAX_DAILY_LOSS_USD: '25',
      MAX_POSITION_SIZE_USD: '250',
      TOTAL_PORTFOLIO_SIZE_USD: '1000'
    },
    intermediate: {
      TRADE_SIZE_HYPE: '1.0',
      TRADE_SIZE_UBTC: '0.001',
      MAX_DAILY_LOSS_USD: '100',
      MAX_POSITION_SIZE_USD: '1000',
      TOTAL_PORTFOLIO_SIZE_USD: '5000'
    },
    advanced: {
      TRADE_SIZE_HYPE: '2.0',
      TRADE_SIZE_UBTC: '0.002',
      MAX_DAILY_LOSS_USD: '200',
      MAX_POSITION_SIZE_USD: '2000',
      TOTAL_PORTFOLIO_SIZE_USD: '10000'
    }
  };
  
  for (const [level, preset] of Object.entries(presets)) {
    try {
      console.log(`\nüìä Testing ${level} preset...`);
      
      // Create config with preset
      const config = new MarketMakingConfig();
      if (!config.trading) config.trading = {};
      if (!config.inventory) config.inventory = {};
      if (!config.risk) config.risk = {};
      
      config.trading.tradeSizes = {
        HYPE: parseFloat(preset.TRADE_SIZE_HYPE),
        UBTC: parseFloat(preset.TRADE_SIZE_UBTC)
      };
      config.inventory.maxPositionSizeUsd = parseFloat(preset.MAX_POSITION_SIZE_USD);
      config.risk.maxDailyLossUsd = parseFloat(preset.MAX_DAILY_LOSS_USD);
      
      const fundingCalculator = new FundingCalculator(config);
      const requirements = await fundingCalculator.calculateMinimumFunding();
      
      console.log(`‚úÖ ${level} preset calculated successfully`);
      console.log(`   Total Required: $${requirements.totalUsd.toFixed(2)}`);
      console.log(`   Portfolio Size: $${preset.TOTAL_PORTFOLIO_SIZE_USD}`);
      console.log(`   Funding Ratio: ${((requirements.totalUsd / parseFloat(preset.TOTAL_PORTFOLIO_SIZE_USD)) * 100).toFixed(1)}%`);
      
    } catch (error) {
      console.error(`‚ùå ${level} preset test failed:`, error.message);
      return false;
    }
  }
  
  console.log('‚úÖ All preset configurations tested successfully');
  return true;
}

async function runAllTests() {
  console.log('üßô‚Äç‚ôÇÔ∏è HyperSwap Setup Wizard Test Suite');
  console.log('‚ïê'.repeat(50));
  
  const tests = [
    { name: 'Setup Wizard Logic', fn: testSetupWizardLogic },
    { name: 'Preset Configurations', fn: testPresetConfigurations }
  ];
  
  let passed = 0;
  let failed = 0;
  
  for (const test of tests) {
    console.log(`\nüîÑ Running ${test.name} Test...`);
    try {
      const result = await test.fn();
      if (result) {
        console.log(`‚úÖ ${test.name} test PASSED`);
        passed++;
      } else {
        console.log(`‚ùå ${test.name} test FAILED`);
        failed++;
      }
    } catch (error) {
      console.log(`‚ùå ${test.name} test FAILED:`, error.message);
      failed++;
    }
  }
  
  console.log('\nüìä Test Results Summary:');
  console.log('‚ïê'.repeat(30));
  console.log(`‚úÖ Passed: ${passed}`);
  console.log(`‚ùå Failed: ${failed}`);
  console.log(`üìà Success Rate: ${((passed / (passed + failed)) * 100).toFixed(1)}%`);
  
  if (failed === 0) {
    console.log('\nüéâ All setup wizard tests passed!');
    console.log('The interactive setup wizard should work correctly.');
    console.log('\nüöÄ Ready to run: npm run setup');
  } else {
    console.log('\n‚ö†Ô∏è Some tests failed. Please review the errors above.');
  }
  
  return failed === 0;
}

if (require.main === module) {
  runAllTests().catch(error => {
    console.error('‚ùå Setup wizard test suite failed:', error);
    process.exit(1);
  });
}

module.exports = { testSetupWizardLogic, testPresetConfigurations };
